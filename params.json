{"name":"Perl::Formance","tagline":"Perl benchmark suite","body":"### Welcome to Perl::Formance.\r\n\r\nThis is about benchmarking Perl. \r\n\r\nIt combines several projects: the actual benchmark suite, \r\ntools to bootstrap a complete Perl+CPAN from git, a results \r\ndatabase and a graph rendering web application.\r\n\r\n### Where are the results?\r\n\r\n* The graphs are [here](http://speed.perlformance.net/timeline/#/?exe=33,22,31,21,29,14,27,25&base=none&ben=grid&env=4&revs=50&equid=off).\r\n\r\n### Synopsis\r\n\r\nFor your local use try the whole mix in one go with:\r\n\r\n```\r\ncurl -Ls http://perlformance.net/bootstrap-perl | perl - --perlformance\r\n```\r\n\r\nThis will by default build a \"blead\" Perl in `/tmp/bootstrap-perl-build`, install CPAN with dependencies, run benchmarks and print out the results on screen at the end. \r\n\r\nAfter `--perlformance` you can provide other versions \r\nvia `--version=v5.14.2` or `--version=01725c1~3`; basically\r\nany rev that \"git\" understands.\r\n\r\n### The benchmark suite\r\n\r\n[Benchmark::Perl::Formance](https://github.com/renormalist/Benchmark-Perl-Formance) \r\nis the framework for running benchmarks. It requires just a few dependencies and runs\r\na basic set of benchmarks.\r\n\r\n### More benchmarks\r\n\r\n[Task::PerlFormance](https://github.com/renormalist/Task-PerlFormance) provides\r\nthe full set of benchmarks via dependencies from CPAN.\r\n\r\n### Your benchmarks\r\n\r\n* You have a code snippet worth to measure over many Perls? [Create a ticket](https://github.com/renormalist/Benchmark-Perl-Formance/issues/new) with details.\r\n* You have a server from where you want to regularly report results to my central results DB? [Contact me](mailto:ss5@renormalist.net).\r\n\r\n### Bootstrap Perl\r\n\r\n[App::Bootstrap::Perl](https://github.com/renormalist/app-bootstrap-perl) is \r\nyet another Perl builder. It focuses on\r\n\r\n* building from git\r\n* set up CPAN.pm with [distroprefs](https://github.com/renormalist/cpanpm-distroprefs) for unattended installation \r\n* lightweight work-arounds for known build problems (e.g., for old 5.8/5.9 Perls)\r\n* inject auxiliary tools to restore build information later\r\n* optionally start programs from the built Perl (e.g, the benchmark suite)\r\n\r\n### Websites\r\n\r\nThere are two related websites:\r\n\r\n* [http://perlformance.net/tapper](http://perlformance.net/tapper/reports/days/2) - raw results\r\n* [http://speed.perlformance.net](http://speed.perlformance.net/timeline/#/?exe=23,20,22,18,21,19,14&base=14+80&ben=DPath.dpath&env=4&revs=50&equid=off) - rendered graphs\r\n\r\n### Used infrastructure\r\n\r\n* **[Tapper](http://tapper-testing.org)** for the overall test infrastructure and results database\r\n* **[Codespeed](https://github.com/tobami/codespeed)** for rendering benchmark graphs\r\n\r\n### Presentations\r\n\r\n* [Overall vision](http://perlformance.net/res/yapc_eu_2011_perlformance-net.pdf) at YAPC::EU 2011\r\n* [Numbers and conclusions](http://perlformance.net/res/yapc_eu_2012_perlformance_numbers.pdf) at YAPC::EU 2012","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}